//闭包，要得到函数内部的变量
//是定义在一个函数内部的函数
//闭包最大的特点，就是它可以“记住”诞生的环境，
//比如f2记住了它诞生的环境f1，所以从f2可以得到f1的内部变量。
function f1() {
    var n = 999;
    function f2() {
        console.log(n);
    }
    return f2;  //闭包就是函数f2，即能够读取其他函数内部变量的函数。
}

var result = f1();
console.log(result());;

// 闭包的最大用处有两个，
// 一个是可以读取函数内部的变量，
// 另一个就是让这些变量始终保持在内存中，即闭包可以使得它诞生环境一直存在。


//JSON.stringify发现参数对象有toJSON方法，
//就直接使用这个方法的返回值作为参数，而忽略原对象的其他参数。

//基本数据类型 & 引用数据类型
/*
给变量赋值时，解析器首先要确认的就是这个值是基本类型值还是引用类型值。

引用：存储在变量处的值是一个指针（point），指向存储对象的内存地址。

注意：所有函数的参数都是按值来传递的
 */

/*
JavaScript代码的整个执行过程，分为两个阶段，代码编译阶段与代码执行阶段。
编译阶段由编译器完成，将代码翻译成可执行代码，这个阶段作用域规则会确定。
执行阶段由引擎完成，主要任务是执行可执行代码，执行上下文在这个阶段创建。
 */